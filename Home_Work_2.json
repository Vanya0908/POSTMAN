{
	"info": {
		"_postman_id": "fcabbf56-4f4f-48db-9327-99bf808b0b15",
		"name": "Home_Work_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string\r",
							"pm.test(\"Check_String\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name=Ivan&age=28",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "28"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"console.log(resp)\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name вбить руками)\r",
							"pm.test(\"Check_Name\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Ivan\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age вбить руками)\r",
							"pm.test(\"Check_Age\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"28\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary вбить руками)\r",
							"pm.test(\"Check_Salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request\r",
							"let req = request.data;\r",
							"console.log(req)\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"pm.test(\"Check_Name_1\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Check_Age_1\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary_1\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(resp.salary)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check_Salary_1.5\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(+req.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "default"
						},
						{
							"key": "age",
							"value": "28",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"console.log(resp)\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"pm.test(\"Check_Name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Check_Age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(resp.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметр name\r",
							"pm.test(\"Check_Dog_Name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Check_Dog_Age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Check_Name_Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check_Age_Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ivan&age=28&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"console.log(resp)\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"pm.test(\"Check_Name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Check_Age\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request\r",
							"console.log(req.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response\r",
							"console.log(resp.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(resp.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(resp.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary, параметр salary из response\r",
							"console.log(resp.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary, параметр salary из response\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary_0\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary_1\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary_2\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Ivan\");\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 28);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 1000);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let salary = [1000,\"2000\",\"3000\"]\r",
							"for (let num = 0; num <= 2; num++) {\r",
							"\tconsole.log(salary[num]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ivan&age=28&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"console.log(resp)\r",
							"\r",
							"// Спарсить request\r",
							"let req = request.data;\r",
							"console.log(req)\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_Start_Qa_Salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_Qa_Salary_After_6months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_Qa_Salary_After_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_Qa_Salary_After_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_Qa_Salary_After_3.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_Person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary*3.3\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary*3.8\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check_U_Name\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"Check_U_Age\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Check_Salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"let rm = resp.person;\r",
							"for(let num in rm) {\r",
							"    if(typeof(rm[num]) === \"object\") {\r",
							"        array_person = rm.u_name;\r",
							"        for (let ml = 0;ml < array_person.lenght;ml++) {\r",
							"            console.log(\"Элемент -\"+String(ml),array_person[ml]);\r",
							"        }\r",
							"    }\r",
							"    else {\r",
							"        console.log(\"key:\",num,\"value\",rm[num])\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}